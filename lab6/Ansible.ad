= Ansible
Sesto laboratorio Tecnologie open-source
:toc: left

:description: Sesto laboratorio Tecnologie open-source \
Università degli Studi di Padova \
Dipartimento di Matematica \
Corso di Laurea Magistrale in Informatica, A.A. 2018 – 2019 \

== Introduzione ad Ansible

Ansible é un tool per la configurazione ed il coordinamento di software su differenti macchine, in particolare si installa su di
una macchina che avrà la funzione di server centrale che comunicherà con altre macchine chiamate nodi. La peculiarità di Ansible
e strumenti di questo genere é che non bisogna installare una versione client, infatti é sufficiente che i nodi abbiamo sshd e python,
nessun altro daemon o agente é richiesto, in più viaggiando su interfaccia ssh gode di una discreta sicurezza.

== Prerequisiti

* Vagrant
* VirtualBox (max ver:6.0)

== Preparazione

* Posizionarsi in una cartella a piacere.
* Eseguire nella powershell (Windows) o shell (linux) il comando
** ``vagrant init ubuntu/trusty64``
* Far partire la macchina virtuale appena creata con il comando
** ``vagrant up``

IMPORTANT: In caso di errore assicurarsi che la versione di virtualbox sia <=6.0 e che tutti i moduli siano attivi

* Connettersi alla macchina virtuale tramite il comando
** ``vagrant ssh``
* inserire la seguente password quando richiesto
** ``vagrant``

== Installazione Ansible

* Dalla shell della macchina virtuale digitiamo i seguenti due comandi
----
$ sudo apt-get update
$ sudo apt-get -y install git make vim python-dev python-pip libffi-dev libssl-dev libxml2-dev libxslt1-dev libjpeg8-dev zlib1g-dev``
----

* Quindi se tutto é andato bene digitare
** ``pip install ansible``

IMPORTANT: Se il precedente comando dovesse fallire é possibile installare ansible tramite il package manager della distribuzione in uso (Ubuntu)
tramite il seguente comando: ``sudo apt-get install ansible``

* Possiamo ora testare ansible col comando
** ``ansible all -m ping``

== Macchina node

Ora che Ansible é stato installato sulla macchina server, non ci resta che reperire alcune informazioni dalla parte client, che in genere si tratterà
di un webserver hostato su AWS o da qualche altra parte, quindi per completare la configurazione non faremo altro che creare un'altra macchina virtuale.

* Inizializziamo una nuova macchina virtuale in una sottocartella nel nostro pc fisico che, per comodità, chiameremo "node"
aprendo una nuova scheda powershell (Windows) o shell (Linux) nella cartella appena creata
** ``vagrant init ubuntu/trusty64``

NOTE: Recarci in una sottocartella é essenziale in quanto non é possibile avere più Vagrantfile (e quindi macchine virtuali) per cartella

* Modifichiamo il Vagrantfile della cartella "node" in modo da eliminare lo sharp (#) dalla linea contente
** ``config.vm.network "private_network", ip: "192.168.33.10"``

NOTE: Passaggio utile per stabilire una connessione fra le due macchine virtuali

* Eseguire il comando per far partire la macchina virtuale
** ``vagrant up``
* Troviamo la locazione della chiave ssh generata con il precedente comando eseguendo il comando
** ``vagrant ssh-config``

NOTE: Appuntarsi la chiave o l'intero file in quanto ci servirà per dopo

== Configurare il server
La struttura di un comando ansible é relativamente semplice

 ansible all -s -m apt -i inventory -a "name=gparted state=installed"

* host (all): su quale nodo o gruppi eseguire l'azione espressa dal modulo
* opzione -s: il comando verrà eseguito con i diritti di amministratore
* opzione -m: specifica il modulo da utilizzare
* opzione -i: specifica il file di inventory, cioé quello in cui sono definiti tutti gli host ed i gruppi
* opzione -a: argomenti del modulo scelto se necessari

Per definire quindi il file di inventory per stabilire una connessione fra la macchina virtuale server
e quella node abbiamo a disposizione diverse opzioni

* creare un file(chiamato ad esempio ``inventory``) con dentro il seguente contenuto
** ``node0 ansible_ssh_host=192.168.33.10 ansible_ssh_user=vagrant ansible_ssh_private_key_file=./keys/node0.key``

NOTE: La "ansible_ssh_private_key_file" é proprio quella appuntata in precedenza, non resta che incollarla nel percorso
definito dalla variabile stessa

* modificare il file ``/etc/ansible/hosts`` aggiungendo la seguente riga nella sezione "Ex. 1"
** ``192.168.33.10``
** copiare il file della chiave appuntato in precedenza ed incollarlo nella cartella ``.ssh/``, quindi rinominarlo in ``id_rsa``
* modificare il file ``/etc/ansible/hosts`` aggiungendo la seguente riga nella sezione "Ex. 1"
** ``192.168.33.10   ansible_ssh_user=vagrant        ansible_ssh_private_key_file=./keys/node0.key``

Non ci resta che testare la connesione con il comando

* `ansible 192.168.33.10 -m ping -i inventory -vvvv` se avete creato il file con node0

oppure

* `ansible 192.168.33.10 -m ping -vvvv` se avete usato gli altri metodi

NOTE: ``-vvvv`` rende l'esecuzione verbosa

== Web server di prova

Proviamo ora ad installare un webserver sulla macchina nodo.

* Installiamo nginx
** ``ansible 192.168.33.10 -s -m apt -i inventory -a 'pkg=nginx state=installed update_cache=true'``
* Avviamo il webserver sul nodo
** ``ansible all -s -m shell -i inventory  -a 'nginx'``
* Apriamo il browser del computer e visitiamo la pagina ``http://192.168.33.10``

Se il tutto ha funzionato possiamo rimuovere nginx e le sue dipendenze con i comandi
----
$ ansible 192.168.33.10 -s -m apt -i inventory -a 'pkg=nginx state=absent update_cache=true'
$ ansible 192.168.33.10 -s -m shell -i inventory -a 'sudo apt-get -y autoremove'
----

== Link approfondimento

/*-------DA INSERIRE-------*/
